; both double and single precision benchmark runs must be 
; performed by modifying the precision parameter below
[backend]
precision = double
rank-allocator = linear

; example CUDA config
[backend-cuda]
device-id = local-rank
;gimmik-max-nnz = 512
mpi-type = standard
;block-1d = 64
;block-2d = 128, 2

; example OpenCL config
;[backend-opencl]
;platform-id = 0
;device-type = gpu
;device-id = local-rank
;gimmik-max-nnz = 512
;local-size-1d = 16
;local-size-2d = 128, 1

[constants]
gamma = 1.4
mu = 0.0000037
Pr = 0.72

M = 0.1
uc = 1.0
rhoc = 1.0

[solver]
system = navier-stokes
order = 4
anti-alias = flux, surf-flux

[solver-time-integrator]
scheme = rk45
controller = pi
dt = 2.5e-8
tstart = 100.0
tend = 101.0
atol = 1e-6
rtol = 1e-6

[solver-interfaces]
riemann-solver = roem
ldg-beta = 0.5
ldg-tau = 0.1

[solver-interfaces-quad]
flux-pts = gauss-legendre
quad-deg = 11
quad-pts = gauss-legendre

[solver-elements-hex]
soln-pts = gauss-legendre
quad-deg = 11
quad-pts = gauss-legendre

[soln-plugin-writer]
dt-out = 1.0
basedir = .
basename = 3d-naca-{t:.2f}

[soln-bcs-wall]
type = no-slp-adia-wall

[soln-bcs-inflow]
type = char-riem-inv
rho = rhoc
u = uc
v = 0
w = 0
p = rhoc*uc*uc/(M*M*gamma)

[soln-bcs-outflow]
type = char-riem-inv
p = rhoc*uc*uc/(M*M*gamma)
u = uc
v = 0
w = 0
rho = rhoc

[soln-ics]
rho = rhoc
u = uc
v = 0
w = 0
p = rhoc*uc*uc/(M*M*gamma)
